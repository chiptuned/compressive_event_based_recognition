function td_data = load_addr_data_64bit_ts(filename)
% td_data = load_atis_data(filename)
%
% Loads data from files generated by the StreamLogger consumer for any type
% of event. This function only read (t, addr) and discard other fields (if
% any) of events.
% timestamps are in uS
% td_data is a structure containing the fields ts and addr
%

f=fopen(filename);

% skip header lines
endOfHeader = 0;
numCommentLine = 0;
while (endOfHeader==0)
    bod = ftell(f);
    tline = fgets(f,256);
    if(tline(1)~='%')
        endOfHeader = 1;
    else
        numCommentLine = numCommentLine+1;
    end
end
fseek(f,bod,'bof');

% Ensure compatibility with previous files.
if (numCommentLine>0) %
    % Read event type
    evType = fread(f,1,'char');
    % Read event size
    evSize = fread(f,1,'char');
else
    evSize =12;
end

bof=ftell(f);

fseek(f,0,'eof');
numEvents=floor((ftell(f)-bof)/evSize);

% read data, start just after header
fseek(f,bof,'bof');
 % ts are 4 bytes (uint32) skipping 4 bytes after each
allTs=uint64(fread(f,numEvents,'uint64',evSize-8,'l'));
% addr start 8 after bof
fseek(f,bof+8,'bof');
% addr are each 4 bytes (uint32) separated by 8 byte timestamps
allAddr=uint32(fread(f,numEvents,'uint32',evSize-4,'l'));

fclose(f);

td_data.ts = double(allTs);
% make sure nonnegative or an error will result from bitand
% (glitches can somehow result in negative addressses...)
td_data.addr=abs(allAddr);
if exist('evType', 'var')
  td_data.type = evType;
end
